//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/ProjectFiles/Scripts/Player/Input/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""PlayerInputMap"",
            ""id"": ""b251fdee-838c-402f-8553-d6e3c5e9ad61"",
            ""actions"": [
                {
                    ""name"": ""ForwardBackward"",
                    ""type"": ""Value"",
                    ""id"": ""8e438592-f7c9-43cb-8798-b662c07f0103"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightLeft"",
                    ""type"": ""Value"",
                    ""id"": ""e64e3101-ed81-44f6-925b-fa3133fd0cc9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftHand"",
                    ""type"": ""Value"",
                    ""id"": ""a4fedfab-7024-4fa6-b3e5-873a8d3f92dc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightHand"",
                    ""type"": ""Value"",
                    ""id"": ""704645ae-e45d-4276-9897-15ce338ad368"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""e8954b95-fda8-4a54-a7e3-23e678325ef3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RiseHand"",
                    ""type"": ""Value"",
                    ""id"": ""abac245e-e8e4-4c83-b565-e35791c00359"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""eea2d199-9e60-444b-9f74-a1d0d4874c40"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ForwardBackward"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""c01c7189-dd0f-437f-9328-bc156ddeac2f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ForwardBackward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""8ec7f734-ba05-4c79-93f3-02b843aa3622"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ForwardBackward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""bbf89334-8424-4adc-ab1e-a4f607b72f14"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightLeft"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""43b8a27f-014a-421a-9751-add155ca9624"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""abe846c3-7947-4686-8571-e9e91cb3b4e1"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""36615bab-4d95-4c0e-851c-9aa994d4655e"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftHand"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""41f8e9da-d731-4c0f-8892-018cb38e8f2d"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightHand"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""154652dd-efdf-4a6a-ab83-91954d8d3d15"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""23875256-394d-49e8-acad-38870894f73f"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RiseHand"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerInputMap
        m_PlayerInputMap = asset.FindActionMap("PlayerInputMap", throwIfNotFound: true);
        m_PlayerInputMap_ForwardBackward = m_PlayerInputMap.FindAction("ForwardBackward", throwIfNotFound: true);
        m_PlayerInputMap_RightLeft = m_PlayerInputMap.FindAction("RightLeft", throwIfNotFound: true);
        m_PlayerInputMap_LeftHand = m_PlayerInputMap.FindAction("LeftHand", throwIfNotFound: true);
        m_PlayerInputMap_RightHand = m_PlayerInputMap.FindAction("RightHand", throwIfNotFound: true);
        m_PlayerInputMap_Jump = m_PlayerInputMap.FindAction("Jump", throwIfNotFound: true);
        m_PlayerInputMap_RiseHand = m_PlayerInputMap.FindAction("RiseHand", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerInputMap
    private readonly InputActionMap m_PlayerInputMap;
    private List<IPlayerInputMapActions> m_PlayerInputMapActionsCallbackInterfaces = new List<IPlayerInputMapActions>();
    private readonly InputAction m_PlayerInputMap_ForwardBackward;
    private readonly InputAction m_PlayerInputMap_RightLeft;
    private readonly InputAction m_PlayerInputMap_LeftHand;
    private readonly InputAction m_PlayerInputMap_RightHand;
    private readonly InputAction m_PlayerInputMap_Jump;
    private readonly InputAction m_PlayerInputMap_RiseHand;
    public struct PlayerInputMapActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerInputMapActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @ForwardBackward => m_Wrapper.m_PlayerInputMap_ForwardBackward;
        public InputAction @RightLeft => m_Wrapper.m_PlayerInputMap_RightLeft;
        public InputAction @LeftHand => m_Wrapper.m_PlayerInputMap_LeftHand;
        public InputAction @RightHand => m_Wrapper.m_PlayerInputMap_RightHand;
        public InputAction @Jump => m_Wrapper.m_PlayerInputMap_Jump;
        public InputAction @RiseHand => m_Wrapper.m_PlayerInputMap_RiseHand;
        public InputActionMap Get() { return m_Wrapper.m_PlayerInputMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerInputMapActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerInputMapActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerInputMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerInputMapActionsCallbackInterfaces.Add(instance);
            @ForwardBackward.started += instance.OnForwardBackward;
            @ForwardBackward.performed += instance.OnForwardBackward;
            @ForwardBackward.canceled += instance.OnForwardBackward;
            @RightLeft.started += instance.OnRightLeft;
            @RightLeft.performed += instance.OnRightLeft;
            @RightLeft.canceled += instance.OnRightLeft;
            @LeftHand.started += instance.OnLeftHand;
            @LeftHand.performed += instance.OnLeftHand;
            @LeftHand.canceled += instance.OnLeftHand;
            @RightHand.started += instance.OnRightHand;
            @RightHand.performed += instance.OnRightHand;
            @RightHand.canceled += instance.OnRightHand;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @RiseHand.started += instance.OnRiseHand;
            @RiseHand.performed += instance.OnRiseHand;
            @RiseHand.canceled += instance.OnRiseHand;
        }

        private void UnregisterCallbacks(IPlayerInputMapActions instance)
        {
            @ForwardBackward.started -= instance.OnForwardBackward;
            @ForwardBackward.performed -= instance.OnForwardBackward;
            @ForwardBackward.canceled -= instance.OnForwardBackward;
            @RightLeft.started -= instance.OnRightLeft;
            @RightLeft.performed -= instance.OnRightLeft;
            @RightLeft.canceled -= instance.OnRightLeft;
            @LeftHand.started -= instance.OnLeftHand;
            @LeftHand.performed -= instance.OnLeftHand;
            @LeftHand.canceled -= instance.OnLeftHand;
            @RightHand.started -= instance.OnRightHand;
            @RightHand.performed -= instance.OnRightHand;
            @RightHand.canceled -= instance.OnRightHand;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @RiseHand.started -= instance.OnRiseHand;
            @RiseHand.performed -= instance.OnRiseHand;
            @RiseHand.canceled -= instance.OnRiseHand;
        }

        public void RemoveCallbacks(IPlayerInputMapActions instance)
        {
            if (m_Wrapper.m_PlayerInputMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerInputMapActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerInputMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerInputMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerInputMapActions @PlayerInputMap => new PlayerInputMapActions(this);
    public interface IPlayerInputMapActions
    {
        void OnForwardBackward(InputAction.CallbackContext context);
        void OnRightLeft(InputAction.CallbackContext context);
        void OnLeftHand(InputAction.CallbackContext context);
        void OnRightHand(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnRiseHand(InputAction.CallbackContext context);
    }
}
